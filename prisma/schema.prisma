// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id              Int         @id @default(autoincrement())
  phone           String?     @unique
  email           String?     @unique
  name            String
  avatar          String?
  created         DateTime    @default(now())
  updated         DateTime    @updatedAt
  tokens          Token[]
  products        Products[]
  fav             Fav[]
  posts           Post[]
  answers         Answer[]
  wonderings      Wondering[]
  writtenReviews  Review[]    @relation(name: "writtenReviews")
  receivedReviews Review[]    @relation(name: "receivedReviews")
  sale            Sale[]
  purchase        Purchase[]
  record          Record[]
  stream          Stream[]
  message         Message[]
}

model Token {
  id      Int      @id @default(autoincrement())
  payload String   @unique
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  Int
  created DateTime @default(now())
  updated DateTime @updatedAt
}

model Products {
  id             Int        @id @default(autoincrement())
  user           User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int
  image          String
  name           String
  price          Int
  description    String     @db.MediumText
  created        DateTime   @default(now())
  updated        DateTime   @updatedAt
  fav            Fav[]
  sale           Sale[]
  purchase       Purchase[]
  record         Record[]
  productReviews Review[]   @relation(name: "productReviews")
}

model Post {
  id         Int         @id @default(autoincrement())
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  question   String      @db.MediumText
  created    DateTime    @default(now())
  updated    DateTime    @updatedAt
  latitude   Float?
  longitude  Float?
  answer     Answer[]
  wonderings Wondering[]
}

model Answer {
  id      Int      @id @default(autoincrement())
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  Int
  post    Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId  Int
  answer  String   @db.MediumText
  created DateTime @default(now())
  updated DateTime @updatedAt
}

model Wondering {
  id      Int      @id @default(autoincrement())
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  Int
  post    Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId  Int
  created DateTime @default(now())
  updated DateTime @updatedAt
}

model Review {
  id           Int      @id @default(autoincrement())
  review       String   @db.MediumText
  createBy     User     @relation(name: "writtenReviews", fields: [createdById], references: [id], onDelete: Cascade)
  createdById  Int
  createFor    User     @relation(name: "receivedReviews", fields: [createdForId], references: [id], onDelete: Cascade)
  createdForId Int
  productFor   Products @relation(name: "productReviews", fields: [productForId], references: [id], onDelete: Cascade)
  productForId Int      @default(1)
  created      DateTime @default(now())
  updated      DateTime @updatedAt
  score        Int      @default(1)
}

model Sale {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Products @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  created   DateTime @default(now())
  updated   DateTime @updatedAt
}

model Purchase {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Products @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  created   DateTime @default(now())
  updated   DateTime @updatedAt
}

model Fav {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Products @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  created   DateTime @default(now())
  updated   DateTime @updatedAt
}

model Stream {
  id            Int       @id @default(autoincrement())
  name          String
  description   String    @db.MediumText
  price         Int
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
  created       DateTime  @default(now())
  updated       DateTime  @updatedAt
  messages      Message[]
  cloudflareId  String    @default("a")
  cloudflareUrl String    @default("a")
  cloudflareKey String    @default("a")
  replayVideoId String    @default("a")
}

model Message {
  id       Int      @id @default(autoincrement())
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int
  message  String   @db.MediumText
  stream   Stream   @relation(fields: [streamId], references: [id], onDelete: Cascade)
  streamId Int
  created  DateTime @default(now())
  updated  DateTime @updatedAt
}

model Record {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Products @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  kind      Kind
  created   DateTime @default(now())
  updated   DateTime @updatedAt
}

enum Kind {
  Purchase
  Sale
  Fav
}
